"use strict";var h=Object.defineProperty;var L=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var W=Object.prototype.hasOwnProperty;var S=(r,e)=>{for(var a in e)h(r,a,{get:e[a],enumerable:!0})},j=(r,e,a,p)=>{if(e&&typeof e=="object"||typeof e=="function")for(let s of v(e))!W.call(r,s)&&s!==a&&h(r,s,{get:()=>e[s],enumerable:!(p=L(e,s))||p.enumerable});return r};var A=r=>j(h({},"__esModule",{value:!0}),r);var T={};S(T,{defaultOptions:()=>m,firstWordRegEx:()=>O,fors:()=>k,forsRegEx:()=>x,ofRegEx:()=>g,ofs:()=>I,parseIngredient:()=>F,rangeSeparatorRegEx:()=>b,rangeSeparatorWords:()=>y,unitsOfMeasure:()=>M});module.exports=A(T);var u=require("numeric-quantity");var m={additionalUOMs:{},allowLeadingOf:!1,normalizeUOM:!1},k=["For"],x=new RegExp(`^(?:${k.join("|")})\\s`,"i"),y=["or","to"],b=new RegExp(`^(-|\u2013|\u2014|(?:${y.join("|")})\\s)`,"i"),O=/^(fl(?:uid)?(?:\s+|-)(?:oz|ounces?)|\w+[-.]?)(.+)?/,I=["of"],g=new RegExp(`^(?:${I.join("|")})\\s+`,"i"),M={bag:{short:"bag",plural:"bags",alternates:[]},box:{short:"box",plural:"boxes",alternates:[]},bunch:{short:"bunch",plural:"bunches",alternates:[]},can:{short:"can",plural:"cans",alternates:[]},carton:{short:"carton",plural:"cartons",alternates:[]},centimeter:{short:"cm",plural:"centimeters",alternates:["cm."]},clove:{short:"clove",plural:"cloves",alternates:[]},container:{short:"container",plural:"containers",alternates:[]},cup:{short:"c",plural:"cups",alternates:["c.","C"]},dash:{short:"dash",plural:"dashes",alternates:[]},drop:{short:"drop",plural:"drops",alternates:[]},ear:{short:"ear",plural:"ears",alternates:[]},"fluid ounce":{short:"fl oz",plural:"fluid ounces",alternates:["fluidounce","floz","fl-oz","fluid-ounce","fluid-ounces","fluidounces","fl ounce","fl ounces","fl-ounce","fl-ounces","fluid oz","fluid-oz"]},foot:{short:"ft",plural:"feet",alternates:["ft."]},gallon:{short:"gal",plural:"gallons",alternates:["gal."]},gram:{short:"g",plural:"grams",alternates:["g."]},head:{short:"head",plural:"heads",alternates:[]},inch:{short:"in",plural:"inches",alternates:["in."]},kilogram:{short:"kg",plural:"kilograms",alternates:["kg."]},large:{short:"lg",plural:"large",alternates:["lg","lg."]},liter:{short:"l",plural:"liters",alternates:[]},medium:{short:"md",plural:"medium",alternates:["med","med.","md."]},meter:{short:"m",plural:"meters",alternates:["m."]},milligram:{short:"mg",plural:"milligrams",alternates:["mg."]},milliliter:{short:"ml",plural:"milliliters",alternates:["mL","ml.","mL."]},millimeter:{short:"mm",plural:"millimeters",alternates:["mm."]},ounce:{short:"oz",plural:"ounces",alternates:["oz."]},pack:{short:"pack",plural:"packs",alternates:[]},package:{short:"pkg",plural:"packages",alternates:["pkg.","pkgs"]},piece:{short:"piece",plural:"pieces",alternates:["pcs","pcs."]},pinch:{short:"pinch",plural:"pinches",alternates:[]},pint:{short:"pt",plural:"pints",alternates:["pt."]},pound:{short:"lb",plural:"pounds",alternates:["lb.","lbs","lbs."]},quart:{short:"qt",plural:"quarts",alternates:["qt.","qts","qts."]},small:{short:"sm",plural:"small",alternates:["sm."]},sprig:{short:"sprig",plural:"sprigs",alternates:[]},stick:{short:"stick",plural:"sticks",alternates:[]},tablespoon:{short:"tbsp",plural:"tablespoons",alternates:["tbsp.","T","Tbsp."]},teaspoon:{short:"tsp",plural:"teaspoons",alternates:["tsp.","t"]},yard:{short:"yd",plural:"yards",alternates:["yd.","yds."]}};var E=r=>{let e=-1,a=r.length,p=0,s=[];for(;++e<a;){let c=r[e].trim();c&&(s[p++]=c)}return s};var P=/\r?\n/,C=([r,e])=>({id:r,...e}),F=(r,e=m)=>{let a={...m,...e},p={...M,...a.additionalUOMs},s=Object.entries(p).map(C),c=s.length;return E(r.split(P)).map(d=>{let t={quantity:null,quantity2:null,unitOfMeasureID:null,unitOfMeasure:null,description:"",isGroupHeader:!1},w=(0,u.numericQuantity)(d.substring(0,1));if(isNaN(w))t.description=d,(t.description.endsWith(":")||x.test(t.description))&&(t.isGroupHeader=!0);else{let n=6,l=NaN;for(;n>0&&isNaN(l);)l=(0,u.numericQuantity)(d.substring(0,n).trim()),l>-1&&(t.quantity=l,t.description=d.substring(n).trim()),n--}let R=b.exec(t.description);if(R){let n=R[1].length,l=(0,u.numericQuantity)(t.description.substring(n).trim()[0]);if(!isNaN(l)){let o=7,i=NaN;for(;--o>0&&isNaN(i);)i=(0,u.numericQuantity)(t.description.substring(n,o)),isNaN(i)||(t.quantity2=i,t.description=t.description.substring(o).trim())}}let f=O.exec(t.description);if(f){let n=f[1].replace(/\s+/g," "),l=(f[2]??"").trim();if(l){let o="",i="",q=-1;for(;++q<c&&!o;){let{alternates:z,id:N,short:U,plural:D}=s[q];[...z,N,U,D].includes(n)&&(o=n,i=N)}o&&(t.unitOfMeasureID=i,t.unitOfMeasure=a.normalizeUOM?i:o,t.description=l)}}return!a.allowLeadingOf&&t.description.match(g)&&(t.description=t.description.replace(g,"")),t})};0&&(module.exports={defaultOptions,firstWordRegEx,fors,forsRegEx,ofRegEx,ofs,parseIngredient,rangeSeparatorRegEx,rangeSeparatorWords,unitsOfMeasure});
//# sourceMappingURL=parse-ingredient.cjs.production.js.map