interface Ingredient {
    /**
     * The primary quantity (the lower quantity in a range, if applicable)
     */
    quantity: number | null;
    /**
     * The secondary quantity (the upper quantity in a range, or `null` if not applicable)
     */
    quantity2: number | null;
    /**
     * The unit of measure identifier
     */
    unitOfMeasureID: string | null;
    /**
     * The unit of measure
     */
    unitOfMeasure: string | null;
    /**
     * The description
     */
    description: string;
    /**
     * Whether the "ingredient" is actually a group header, e.g. "For icing:"
     */
    isGroupHeader: boolean;
}
interface UnitOfMeasure {
    short: string;
    plural: string;
    alternates: string[];
}
type UnitOfMeasureDefinitions = Record<string, UnitOfMeasure>;
interface ParseIngredientOptions {
    /**
     * Converts the unit of measure (`unitOfMeasure` property) of each
     * ingredient to its long, singular form. For example, "ml" becomes
     * "milliliter" and "cups" becomes "cup".
     *
     * @default false
     */
    normalizeUOM?: boolean;
    /**
     * An object that matches the format of `unitsOfMeasure`. Keys that
     * match any in `unitsOfMeasure` will be used instead of the default,
     * and any others will be added to the list of known units of measure
     * when parsing ingredients.
     *
     * @default {}
     */
    additionalUOMs?: UnitOfMeasureDefinitions;
    /**
     * If `true`, ingredient descriptions that start with "of " will not be
     * modified. (By default, a leading "of " will be removed all descriptions.)
     *
     * @default false
     */
    allowLeadingOf?: boolean;
}

/**
 * Parses a string into an array of recipe ingredient objects
 * @param ingText The ingredient text
 * @param options Configuration options
 */
declare const parseIngredient: (ingText: string, options?: ParseIngredientOptions) => Ingredient[];

declare const defaultOptions: {
    additionalUOMs: {};
    allowLeadingOf: false;
    normalizeUOM: false;
};
declare const fors: readonly ["For"];
declare const forsRegEx: RegExp;
declare const rangeSeparatorWords: readonly ["or", "to"];
declare const rangeSeparatorRegEx: RegExp;
declare const firstWordRegEx: RegExp;
declare const ofs: readonly ["of"];
declare const ofRegEx: RegExp;
declare const unitsOfMeasure: {
    bag: {
        short: string;
        plural: string;
        alternates: never[];
    };
    box: {
        short: string;
        plural: string;
        alternates: never[];
    };
    bunch: {
        short: string;
        plural: string;
        alternates: never[];
    };
    can: {
        short: string;
        plural: string;
        alternates: never[];
    };
    carton: {
        short: string;
        plural: string;
        alternates: never[];
    };
    centimeter: {
        short: string;
        plural: string;
        alternates: string[];
    };
    clove: {
        short: string;
        plural: string;
        alternates: never[];
    };
    container: {
        short: string;
        plural: string;
        alternates: never[];
    };
    cup: {
        short: string;
        plural: string;
        alternates: string[];
    };
    dash: {
        short: string;
        plural: string;
        alternates: never[];
    };
    drop: {
        short: string;
        plural: string;
        alternates: never[];
    };
    ear: {
        short: string;
        plural: string;
        alternates: never[];
    };
    'fluid ounce': {
        short: string;
        plural: string;
        alternates: string[];
    };
    foot: {
        short: string;
        plural: string;
        alternates: string[];
    };
    gallon: {
        short: string;
        plural: string;
        alternates: string[];
    };
    gram: {
        short: string;
        plural: string;
        alternates: string[];
    };
    head: {
        short: string;
        plural: string;
        alternates: never[];
    };
    inch: {
        short: string;
        plural: string;
        alternates: string[];
    };
    kilogram: {
        short: string;
        plural: string;
        alternates: string[];
    };
    large: {
        short: string;
        plural: string;
        alternates: string[];
    };
    liter: {
        short: string;
        plural: string;
        alternates: never[];
    };
    medium: {
        short: string;
        plural: string;
        alternates: string[];
    };
    meter: {
        short: string;
        plural: string;
        alternates: string[];
    };
    milligram: {
        short: string;
        plural: string;
        alternates: string[];
    };
    milliliter: {
        short: string;
        plural: string;
        alternates: string[];
    };
    millimeter: {
        short: string;
        plural: string;
        alternates: string[];
    };
    ounce: {
        short: string;
        plural: string;
        alternates: string[];
    };
    pack: {
        short: string;
        plural: string;
        alternates: never[];
    };
    package: {
        short: string;
        plural: string;
        alternates: string[];
    };
    piece: {
        short: string;
        plural: string;
        alternates: string[];
    };
    pinch: {
        short: string;
        plural: string;
        alternates: never[];
    };
    pint: {
        short: string;
        plural: string;
        alternates: string[];
    };
    pound: {
        short: string;
        plural: string;
        alternates: string[];
    };
    quart: {
        short: string;
        plural: string;
        alternates: string[];
    };
    small: {
        short: string;
        plural: string;
        alternates: string[];
    };
    sprig: {
        short: string;
        plural: string;
        alternates: never[];
    };
    stick: {
        short: string;
        plural: string;
        alternates: never[];
    };
    tablespoon: {
        short: string;
        plural: string;
        alternates: string[];
    };
    teaspoon: {
        short: string;
        plural: string;
        alternates: string[];
    };
    yard: {
        short: string;
        plural: string;
        alternates: string[];
    };
};

export { Ingredient, ParseIngredientOptions, UnitOfMeasure, UnitOfMeasureDefinitions, defaultOptions, firstWordRegEx, fors, forsRegEx, ofRegEx, ofs, parseIngredient, rangeSeparatorRegEx, rangeSeparatorWords, unitsOfMeasure };
