import{numericQuantity as c}from"numeric-quantity";var g={additionalUOMs:{},allowLeadingOf:!1,normalizeUOM:!1},w=["For"],O=new RegExp(`^(?:${w.join("|")})\\s`,"i"),z=["or","to"],M=new RegExp(`^(-|\u2013|\u2014|(?:${z.join("|")})\\s)`,"i"),R=/^(fl(?:uid)?(?:\s+|-)(?:oz|ounces?)|\w+[-.]?)(.+)?/,U=["of"],f=new RegExp(`^(?:${U.join("|")})\\s+`,"i"),q={bag:{short:"bag",plural:"bags",alternates:[]},box:{short:"box",plural:"boxes",alternates:[]},bunch:{short:"bunch",plural:"bunches",alternates:[]},can:{short:"can",plural:"cans",alternates:[]},carton:{short:"carton",plural:"cartons",alternates:[]},centimeter:{short:"cm",plural:"centimeters",alternates:["cm."]},clove:{short:"clove",plural:"cloves",alternates:[]},container:{short:"container",plural:"containers",alternates:[]},cup:{short:"c",plural:"cups",alternates:["c.","C"]},dash:{short:"dash",plural:"dashes",alternates:[]},drop:{short:"drop",plural:"drops",alternates:[]},ear:{short:"ear",plural:"ears",alternates:[]},"fluid ounce":{short:"fl oz",plural:"fluid ounces",alternates:["fluidounce","floz","fl-oz","fluid-ounce","fluid-ounces","fluidounces","fl ounce","fl ounces","fl-ounce","fl-ounces","fluid oz","fluid-oz"]},foot:{short:"ft",plural:"feet",alternates:["ft."]},gallon:{short:"gal",plural:"gallons",alternates:["gal."]},gram:{short:"g",plural:"grams",alternates:["g."]},head:{short:"head",plural:"heads",alternates:[]},inch:{short:"in",plural:"inches",alternates:["in."]},kilogram:{short:"kg",plural:"kilograms",alternates:["kg."]},large:{short:"lg",plural:"large",alternates:["lg","lg."]},liter:{short:"l",plural:"liters",alternates:[]},medium:{short:"md",plural:"medium",alternates:["med","med.","md."]},meter:{short:"m",plural:"meters",alternates:["m."]},milligram:{short:"mg",plural:"milligrams",alternates:["mg."]},milliliter:{short:"ml",plural:"milliliters",alternates:["mL","ml.","mL."]},millimeter:{short:"mm",plural:"millimeters",alternates:["mm."]},ounce:{short:"oz",plural:"ounces",alternates:["oz."]},pack:{short:"pack",plural:"packs",alternates:[]},package:{short:"pkg",plural:"packages",alternates:["pkg.","pkgs"]},piece:{short:"piece",plural:"pieces",alternates:["pcs","pcs."]},pinch:{short:"pinch",plural:"pinches",alternates:[]},pint:{short:"pt",plural:"pints",alternates:["pt."]},pound:{short:"lb",plural:"pounds",alternates:["lb.","lbs","lbs."]},quart:{short:"qt",plural:"quarts",alternates:["qt.","qts","qts."]},small:{short:"sm",plural:"small",alternates:["sm."]},sprig:{short:"sprig",plural:"sprigs",alternates:[]},stick:{short:"stick",plural:"sticks",alternates:[]},tablespoon:{short:"tbsp",plural:"tablespoons",alternates:["tbsp.","T","Tbsp."]},teaspoon:{short:"tsp",plural:"teaspoons",alternates:["tsp.","t"]},yard:{short:"yd",plural:"yards",alternates:["yd.","yds."]}};var N=n=>{let l=-1,o=n.length,d=0,i=[];for(;++l<o;){let p=n[l].trim();p&&(i[d++]=p)}return i};var D=/\r?\n/,L=([n,l])=>({id:n,...l}),C=(n,l=g)=>{let o={...g,...l},d={...q,...o.additionalUOMs},i=Object.entries(d).map(L),p=i.length;return N(n.split(D)).map(u=>{let t={quantity:null,quantity2:null,unitOfMeasureID:null,unitOfMeasure:null,description:"",isGroupHeader:!1},k=c(u.substring(0,1));if(isNaN(k))t.description=u,(t.description.endsWith(":")||O.test(t.description))&&(t.isGroupHeader=!0);else{let e=6,r=NaN;for(;e>0&&isNaN(r);)r=c(u.substring(0,e).trim()),r>-1&&(t.quantity=r,t.description=u.substring(e).trim()),e--}let h=M.exec(t.description);if(h){let e=h[1].length,r=c(t.description.substring(e).trim()[0]);if(!isNaN(r)){let s=7,a=NaN;for(;--s>0&&isNaN(a);)a=c(t.description.substring(e,s)),isNaN(a)||(t.quantity2=a,t.description=t.description.substring(s).trim())}}let m=R.exec(t.description);if(m){let e=m[1].replace(/\s+/g," "),r=(m[2]??"").trim();if(r){let s="",a="",x=-1;for(;++x<p&&!s;){let{alternates:y,id:b,short:I,plural:E}=i[x];[...y,b,I,E].includes(e)&&(s=e,a=b)}s&&(t.unitOfMeasureID=a,t.unitOfMeasure=o.normalizeUOM?a:s,t.description=r)}}return!o.allowLeadingOf&&t.description.match(f)&&(t.description=t.description.replace(f,"")),t})};export{g as defaultOptions,R as firstWordRegEx,w as fors,O as forsRegEx,f as ofRegEx,U as ofs,C as parseIngredient,M as rangeSeparatorRegEx,z as rangeSeparatorWords,q as unitsOfMeasure};
//# sourceMappingURL=parse-ingredient.production.mjs.map